[
  
  {
    "title": "jekyll 블로그에서 mathjax가 정상적으로 작동하지 않을 때",
    "url": "/posts/mathjax-to-katex/",
    "categories": "",
    "tags": "",
    "date": "2024-12-02 00:00:00 +0800",
    





    
    "snippet": "문제 상황글을 작성하다보면 수식을 작성할 때가 많은데, 빌드 후 배포된 정적 파일에서 수식에 관련한 렌더링 문제가 생겼다. 포스팅에 처음 접속하면 다음과 같이 수식이 렌더링되지 않은 상태로 표시되다가, 새로고침을 몇 번 해주면 수식이 표시됐다가 안됐다가 하는 것이었다.수식이 항상 비정상적으로 표시되면 차라리 해결하기 쉬운데, 되었다 안되었다 하니까 별...",
    "content": "문제 상황글을 작성하다보면 수식을 작성할 때가 많은데, 빌드 후 배포된 정적 파일에서 수식에 관련한 렌더링 문제가 생겼다. 포스팅에 처음 접속하면 다음과 같이 수식이 렌더링되지 않은 상태로 표시되다가, 새로고침을 몇 번 해주면 수식이 표시됐다가 안됐다가 하는 것이었다.수식이 항상 비정상적으로 표시되면 차라리 해결하기 쉬운데, 되었다 안되었다 하니까 별의 별 짓을 다 해봤던 것 같다. 최종적으로 내린 결론은 다음과 같다. 필자는 chirpy theme을 사용하는데, 이 테마에서는 기본적으로 kramdown 엔진을 사용하고 있다. 아무 설정을 안해도 수식 작성이 렌더링 되도록 만들어져 있는데, 이 때 default math engine을 어떤 것으로 채택하는지는 잘 모르겠다. 어쨌든, kramdown에서 default math engine 사용을 비활성화하고 katex를 따로 설정해주면서 위의 문제를 해결했다.Solution  katex 엔진 사용 설정/_include/head.html 파일에 https://katex.org/docs/browser에 나와있는 다음의 스크립트를 추가한다.  /_include/head.html 파일은 블로그의 정적 파일 빌드 시, 포스트의 head에 항상 포함시킬 내용을 작성하는 문서이다.    &lt;link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.css\" integrity=\"sha384-nB0miv6/jRmo5UMMR1wu3Gz6NLsoTkbqJghGIsx//Rlm+ZU03BU6SQNC66uf4l5+\" crossorigin=\"anonymous\"&gt;    &lt;!-- The loading of KaTeX is deferred to speed up page rendering --&gt;    &lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/katex.min.js\" integrity=\"sha384-7zkQWkzuo3B5mTepMUcHkMB5jZaolc2xDwL6VFqjFALcbeS9Ggm/Yr2r3Dy4lfFg\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;    &lt;!-- To automatically render math in text elements, include the auto-render extension: --&gt;    &lt;script defer src=\"https://cdn.jsdelivr.net/npm/katex@0.16.11/dist/contrib/auto-render.min.js\" integrity=\"sha384-43gviWU0YVjaDtb/GhzOouOXtZMP/7XUzwPTstBeZFe/+rCMvRwr4yROQP43s0Xk\" crossorigin=\"anonymous\"        onload=\"renderMathInElement(document.body);\"&gt;&lt;/script&gt;위의 코드는 수식을 렌더링하기 위한 스크립트를 cdn에서 참조하는 역할을 한다. 또한, 동일한 파일에서 다음의 스크립트를 통해, inline, display수식 식별자를 지정해주었다.  &lt;script&gt;    document.addEventListener(\"DOMContentLoaded\", function() {      renderMathInElement(document.body, {        delimiters: [          { left: \"$$\", right: \"$$\", display: true },          { left: \"\\\\[\", right: \"\\\\]\", display: true },          { left: \"$\", right: \"$\", display: false }        ]      });    });  &lt;/script&gt;  kramdown default math engine 비활성화kramdown:  ...  use_math: false  .../_config.yml의 kramdown 속성에 위와 같은 라인을 추가하여 default engine을 비활성화한다.최종적으로 다음과 같이 수식이 일관적으로 잘 출력되는 것을 볼 수 있다.출처  https://khw11044.github.io/blog/blog-etc/2020-12-21-jekyll-Latex/  chatgpt"
  },
  
  {
    "title": "Katex Test",
    "url": "/posts/katex-test/",
    "categories": "",
    "tags": "",
    "date": "2024-12-02 00:00:00 +0800",
    





    
    "snippet": "가나다라마바사 $x + y = 4$\\begin{equation}x + y = 4\\end{equation}가나다라마바사\\[\\begin{aligned}        a &amp;= b + c \\\\        b + c &amp;= a    \\end{aligned}\\]",
    "content": "가나다라마바사 $x + y = 4$\\begin{equation}x + y = 4\\end{equation}가나다라마바사\\[\\begin{aligned}        a &amp;= b + c \\\\        b + c &amp;= a    \\end{aligned}\\]"
  },
  
  {
    "title": "Dreamhack XSS Filtering Bypass Write up",
    "url": "/posts/Dreamhackwriteup3/",
    "categories": "",
    "tags": "",
    "date": "2024-11-29 00:00:00 +0800",
    





    
    "snippet": "backend-side 분석#!/usr/bin/python3from flask import Flask, request, render_templatefrom selenium import webdriverfrom selenium.webdriver.chrome.service import Serviceimport urllibimport osapp = Flas...",
    "content": "backend-side 분석#!/usr/bin/python3from flask import Flask, request, render_templatefrom selenium import webdriverfrom selenium.webdriver.chrome.service import Serviceimport urllibimport osapp = Flask(__name__)app.secret_key = os.urandom(32)try:    FLAG = open(\"./flag.txt\", \"r\").read()except:    FLAG = \"[**FLAG**]\"#localhost에서 전달받은 쿠키로 url에 get요청.def read_url(url, cookie={\"name\": \"name\", \"value\": \"value\"}):    cookie.update({\"domain\": \"127.0.0.1\"})    try:        service = Service(executable_path=\"/chromedriver\")        options = webdriver.ChromeOptions()        for _ in [            \"headless\",            \"window-size=1920x1080\",            \"disable-gpu\",            \"no-sandbox\",            \"disable-dev-shm-usage\",        ]:            options.add_argument(_)        driver = webdriver.Chrome(service=service, options=options)        driver.implicitly_wait(3)        driver.set_page_load_timeout(3)        driver.get(\"http://127.0.0.1:8000/\")        driver.add_cookie(cookie)        driver.get(url)    except Exception as e:        driver.quit()        # return str(e)        return False    driver.quit()    return True#전달받은 쿠키와 param으로 vuln에 넘겨줌.def check_xss(param, cookie={\"name\": \"name\", \"value\": \"value\"}):    url = f\"http://127.0.0.1:8000/vuln?param={urllib.parse.quote(param)}\"    return read_url(url, cookie)#자바스크립트를 못쓰게 필터링한후 반환def xss_filter(text):    _filter = [\"script\", \"on\", \"javascript:\"]    for f in _filter:        if f in text.lower():            text = text.replace(f, \"\")    return text@app.route(\"/\")def index():    return render_template(\"index.html\")@app.route(\"/vuln\")def vuln():    param = request.args.get(\"param\", \"\")    param = xss_filter(param)    return param@app.route(\"/flag\", methods=[\"GET\", \"POST\"])def flag():    if request.method == \"GET\":        return render_template(\"flag.html\")    elif request.method == \"POST\":        param = request.form.get(\"param\")        if not check_xss(param, {\"name\": \"flag\", \"value\": FLAG.strip()}):            return '&lt;script&gt;alert(\"wrong??\");history.go(-1);&lt;/script&gt;'        return '&lt;script&gt;alert(\"good\");history.go(-1);&lt;/script&gt;'memo_text = \"\"@app.route(\"/memo\")def memo():    global memo_text    text = request.args.get(\"memo\", \"\")    memo_text += text + \"\\n\"    return render_template(\"memo.html\", memo=memo_text)app.run(host=\"0.0.0.0\", port=8000)Solutionlocatioonn.href=\"/memo?memo=\"+document.cookie;와 같이 filtering을 우회한 후에 쿠키에 추가되어있는 flag를 memo에 추가해서 출력시킴."
  },
  
  {
    "title": "Dreamhack CSRF-1 Write-Up",
    "url": "/posts/Dreamhack-WriteUp2/",
    "categories": "",
    "tags": "",
    "date": "2024-11-29 00:00:00 +0800",
    





    
    "snippet": "backend-side 분석#!/usr/bin/python3from flask import Flask, request, render_template, make_response, redirect, url_forfrom selenium import webdriverfrom selenium.webdriver.chrome.service import Servi...",
    "content": "backend-side 분석#!/usr/bin/python3from flask import Flask, request, render_template, make_response, redirect, url_forfrom selenium import webdriverfrom selenium.webdriver.chrome.service import Serviceimport urllibimport osapp = Flask(__name__)app.secret_key = os.urandom(32)try:    FLAG = open(\"./flag.txt\", \"r\").read()except:    FLAG = \"[**FLAG**]\"users = {    'guest': 'guest',    'admin': FLAG}session_storage = {}def read_url(url, cookie={\"name\": \"name\", \"value\": \"value\"}):    cookie.update({\"domain\": \"127.0.0.1\"})    try:        service = Service(executable_path=\"/chromedriver\")        options = webdriver.ChromeOptions()        for _ in [            \"headless\",            \"window-size=1920x1080\",            \"disable-gpu\",            \"no-sandbox\",            \"disable-dev-shm-usage\",        ]:            options.add_argument(_)        driver = webdriver.Chrome(service=service, options=options)        driver.implicitly_wait(3)        driver.set_page_load_timeout(3)        driver.get(\"http://127.0.0.1:8000/\")        driver.add_cookie(cookie) ###        driver.get(url) ###    except Exception as e:        driver.quit()        print(str(e))        # return str(e)        return False    driver.quit()    return Truedef check_csrf(param, cookie={\"name\": \"name\", \"value\": \"value\"}):    url = f\"http://127.0.0.1:8000/vuln?param={urllib.parse.quote(param)}\"    return read_url(url, cookie)#id = username이어야 flag 출력@app.route(\"/\")def index():    session_id = request.cookies.get('sessionid', None)    try:        username = session_storage[session_id]    except KeyError:        return render_template('index.html', text='please login')    return render_template('index.html', text=f'Hello {username}, {\"flag is \" + FLAG if username == \"admin\" else \"you are not an admin\"}')#param 입력값을 리턴@app.route(\"/vuln\")def vuln():    param = request.args.get(\"param\", \"\").lower()    xss_filter = [\"frame\", \"script\", \"on\"]    for _ in xss_filter:        param = param.replace(_, \"*\")    return param#16바이트의 session_id를 생성해서 session_id에 session_id : admin 저장, sessionid= session_id 인상태로 vuln에 get요청@app.route(\"/flag\", methods=[\"GET\", \"POST\"])def flag():    if request.method == \"GET\":        return render_template(\"flag.html\")    elif request.method == \"POST\":        param = request.form.get(\"param\", \"\")        session_id = os.urandom(16).hex()        session_storage[session_id] = 'admin'         if not check_csrf(param, {\"name\":\"sessionid\", \"value\": session_id}):             return '&lt;script&gt;alert(\"wrong??\");history.go(-1);&lt;/script&gt;'        return '&lt;script&gt;alert(\"good\");history.go(-1);&lt;/script&gt;'#username, password를 인자로 받고, password가 맞으면 8바이트 hex : username 으로 session_storage에 저장, 쿠키를 session_id로 지정후 sessionid 지정해줌.@app.route('/login', methods=['GET', 'POST'])def login():                         if request.method == 'GET':        return render_template('login.html')    elif request.method == 'POST':        username = request.form.get('username')        password = request.form.get('password')        try:            pw = users[username]        except:            return '&lt;script&gt;alert(\"not found user\");history.go(-1);&lt;/script&gt;'        if pw == password:            resp = make_response(redirect(url_for('index')) )             session_id = os.urandom(8).hex()            session_storage[session_id] = username             resp.set_cookie('sessionid', session_id)             return resp         return '&lt;script&gt;alert(\"wrong password\");history.go(-1);&lt;/script&gt;'# pw, sessionid 를 인자로 받아서 session_id와 동일한 유저네임의 pw를 변경, done return@app.route(\"/change_password\") def change_password():    pw = request.args.get(\"pw\", \"\")    session_id = request.cookies.get('sessionid', None)    try:        username = session_storage[session_id]    except KeyError:        return render_template('index.html', text='please login')    users[username] = pw    return 'Done'app.run(host=\"0.0.0.0\", port=8000)Solution/flag에서 admin에 해당하는 session id로 /vuln을 거쳐 change_password에서 admin의 password를 변경한 후admin, pw로 로그인하면 flag가 출력됨."
  },
  
  {
    "title": "phasor notation의 개념과 연산",
    "url": "/posts/IEEE-10-1/",
    "categories": "IEEE",
    "tags": "",
    "date": "2024-11-27 00:00:00 +0800",
    





    
    "snippet": "phasor notation전기전자공학에서 정현파를 표현하기 위해서는 $f(t) = A \\cos(\\omega t + \\phi)$ 와 같은 수식을 사용한다. 주기가 $f$인 정현파라고 하면, $\\omega = 2\\pi f$가 될 것이다. 동일한 RLC회로에서 회로에서 교류전압 $v$와 그로 인한 $i$는 $\\omega$가 같다. 따라서 $A$와 $\\ph...",
    "content": "phasor notation전기전자공학에서 정현파를 표현하기 위해서는 $f(t) = A \\cos(\\omega t + \\phi)$ 와 같은 수식을 사용한다. 주기가 $f$인 정현파라고 하면, $\\omega = 2\\pi f$가 될 것이다. 동일한 RLC회로에서 회로에서 교류전압 $v$와 그로 인한 $i$는 $\\omega$가 같다. 따라서 $A$와 $\\phi$만 결정되면 특정 상태의 유일한 정현파를 결정할 수 있게 된다.  ($\\because \\omega$는 상수이다.) 다음의 과정을 거쳐보자.  삼각함수의 덧셈정리를 이용해 $f(t)$를 전개한다.\\(f(t) = A \\cos(\\omega t + \\phi) = \\textcolor{red}{A\\cos\\phi}\\cos\\omega t - \\textcolor{blue}{A\\sin\\phi}\\sin\\omega t\\)  \\eqref{eq:cosadd} 에서 $\\textcolor{red}{A\\cos\\phi}$를 $\\textcolor{red}{X}$, $\\textcolor{blue}{A\\sin\\phi}$를 $\\textcolor{blue}{Y}$라고 둔다면, $f(t)$는 다음과 같다.\\begin{equation}    f(t) = \\textcolor{red}{X}\\cos\\omega t - \\textcolor{blue}{Y}\\sin\\omega t\\end{equation}  $\\omega$는 상수이므로, $\\textcolor{red}{X}$와 $\\textcolor{blue}{Y}$를 결정하는 것으로 어떤 특정한 정현파를 표현할 수 있게 된다. 이때, $X + Yj$와 같이 복소수를 이용하여 표현하면, 허수가 기하적으로 회전을 의미한다는 사실과, 오일러 방정식 등 차후의 계산에 있어서 많은 이점을 얻게 된다.   $X + Yj$는 $A\\cos(\\phi) + A\\sin(\\phi)j$ 같이 표현할 수 있고, $A\\cos(\\phi) + A\\sin(\\phi)j$는 오일러 공식으로 다음과 같이 표현이 가능하다.\\[\\begin{equation}A\\cos\\phi + jA\\sin\\phi  = Ae^{\\phi j}\\end{equation}\\]  $Ae^{\\phi j}$를 $A \\angle \\phi$와 같이 표현하기로 하자.우리는 결론적으로 $A$와 $\\phi$를 이용하여 정현파를 표현할 수 있게 되었다. 마치 $(1,2)$로 특정한 점을 표현할 수 있는 것처럼 말이다. 이 방법을 phasor notation 이라고 부른다. phase는 물리학에서 위상을 의미하는데, 정현파를 위상차인 $\\phi$를 이용하여 표현하므로, phasor notation이라고 부른다고 한다.정리특정한 정현파를 다음과 같이 여러가지 방식으로  표현할 수 있고, 의 표현방식을 phasor notation이라고 한다.\\[\\begin{aligned}    \\textcolor{red}{A}\\cos(\\omega t + \\textcolor{blue}{\\phi})     \\textcolor{red}{A}e^{\\omega\\textcolor{blue}{\\phi}}     \\textcolor{red}{A} \\angle \\textcolor{blue}{\\phi}     X + Yj\\end{aligned}\\]phasor notation의 곱셈, 나눗셈과 미분phasor notation의 곱셈, 나눗셈$X = X_me^{\\omega\\phi} , Y = Y_me^{\\omega\\theta}$의 정의를 이용하면 phasor notation의 사칙연산을 유도할 수 있다.\\[\\begin{aligned}   XY = X_mY_m \\angle (\\phi + \\theta)    {X \\over Y} = {X_m \\over Y_m} \\angle (\\phi - \\theta) \\end{aligned}\\]phasor notation의 미분또한 phasor notation은 정현파, 즉 t에 대한 함수를 의미하므로 phasor notation의 미분도 정의될 수 있다. 이때, phasor notation은  exponential의 미분법을 따르므로 매우 간단한 형태로 정리된다. $f(t)$ 에 대해,\\[\\begin{aligned}            f(t) = \\textcolor{red}{X}\\cos\\omega t - \\textcolor{blue}{Y}\\sin\\omega t     f^\\prime(t) = -\\omega X\\sin\\omega t - \\omega Y\\cos\\omega t                 = \\textcolor{red}{(-\\omega Y)}\\cos\\omega t - \\textcolor{blue}{(\\omega X)}\\sin\\omega t \\end{aligned}\\]\\eqref{eq:before}과 \\eqref{eq:after}를 비교해보면, 각각 $X \\rightarrow -\\omega Y$ , $Y \\rightarrow \\omega X$로 바뀐 것을 볼 수 있다. 이는 phasor notation의 rectangular representation에서 $\\omega j$를 곱한 형태와 같다.\\(\\begin{aligned}    V = \\textcolor{red}{X} + \\textcolor{blue}{Y}j \\\\    V^\\prime = \\omega j\\textcolor{red}{X} + -\\omega\\textcolor{blue}{Y} = \\omega jV \\\\    \\therefore V^\\prime = \\omega jV\\end{aligned}\\)즉, $V^\\prime = \\omega jV$ 이다. 미분식이 원형의 상수곱 형태로 표현된다는 사실은 계산상에 있어서 매우 편리한 이점이다. 대표적인 예시가 지수함수이다. 추후에 포스팅할 ac회로에서의 inductor, capacitor를 설명할 때도, 이 미분식이 매우 편리하게 이용된다.출처  https://angeloyeo.github.io/2019/06/18/phasor.html  chatgpt  부산대학교 전상률 교수님 강의자료"
  },
  
  {
    "title": "op-amp의 개념, 구조, 종류",
    "url": "/posts/op-amp/",
    "categories": "IEEE",
    "tags": "",
    "date": "2024-11-25 00:00:00 +0800",
    





    
    "snippet": "op-amp  op-amp는 두 입력 전압의 차이를 증폭시킨 전압을 출력하는 고이득 전압 증폭기이다.op-amp의 정식명칭은 operation amplifier인데, 그 이름에서 단자의 역할을 유추할 수 있다. op-amp는 두 입력 신호에 대해 사칙연산, 미분, 적분과 같은 여러가지 연산(operation)을 한 후 그 결과를 몇 십~몇 백만배 증폭...",
    "content": "op-amp  op-amp는 두 입력 전압의 차이를 증폭시킨 전압을 출력하는 고이득 전압 증폭기이다.op-amp의 정식명칭은 operation amplifier인데, 그 이름에서 단자의 역할을 유추할 수 있다. op-amp는 두 입력 신호에 대해 사칙연산, 미분, 적분과 같은 여러가지 연산(operation)을 한 후 그 결과를 몇 십~몇 백만배 증폭(amplifier)해서 출력해준다.op-amp는 다음의 수식으로 대표된다.\\[\\begin{equation}v_o = A(v_+ - v_-)    \\label{eq:op_amp}\\end{equation}\\]위의 수식으로 op-amp의 역할을 직관적으로 이해할 수 있다.op-amp의 구조op-amp에서 알아야 할 컴포넌트는 크게 5개이다.  $v_+$ (noninverted-input) : 두 입력 신호 중 위상이 유지되는 전압신호이다.  $v_-$ (inverted-input) : 두 입력 신호 중 위상이 뒤집히는 전압신호이다.  $v_o$ : 증폭되어 출력되는 전압신호이다.  $v_{SS}$, $v_{DD}$ : op-amp에 필요한 전원을 공급해주는 전원 단자이다.\\eqref{eq:op_amp}의 수식에서 $v_+$는 부호가 유지되는 반면에 (noninverted), $v_-$는 부호가 반대가 되는 것을 확인할 수 있다 (inverted).실제로 op-amp는 매우 복잡하게 구성되어 있다. 그러나 이 글에서는 등가회로로 대체하여 설명하려 한다.uA741 op-amp  op-amp 등가회로 위 회로를 보면 $v_+$,$v_-$ 노드와 $v_o$ 노드가 연결되어 있지 않다고 생각할 수 있는데, 종속전압원 $G_{v_{in}}$ 가 $v_{in}$에 의해 결정되기 때문에 완전히 open된 상태는 아니다. op-amp의 자세한 작동과정도 알아보려 했지만 컴퓨터공학 전공인 필자의 입장에선 배보다 배꼽이 더 커지는 것 같아서, 대략적으로 어떻게 구성되었는지만 이해하기로 했다.이상적인 op-amp의 기본 법칙  회로 내부에서 실제로 $v_+$노드 와 $v_-$ 노드는 서로 open 되어있다. 따라서 $i_+$ = $i_-$ = 0  $i_+ = i_- = 0$  아래의 설명을 읽기 전에 close-loop op-amp에 대해 이해하고 오길 바란다. negative feedback을 하는 close-loop op-amp에 대해서\\(\\begin{align}  since \\quad v_- =  Bv_o \\quad and \\quad v_o = Av_+ - Av_- \\quad, \\\\  v_+AB = Bv_o + Av_-B = v_- + Av_-B \\\\  v_+B = v_-({1 \\over A} + B)\\end{align}\\)이 때, 이상적인 op-amp는 $A \\rightarrow \\infty $라고 가정한다. $A \\rightarrow \\infty $라고 가정해야 \\eqref{eq:result}라는 결론이 도출되는데,이 결론으로 인해 회로 분석과정이 훨씬 단순해진다고 한다.  \\eqref{eq:result}의 결론을 유도하기 위한 짜집기 정도로 생각할 수 있겠다.\\(\\begin{align}  \\lim_{A \\to \\infty}v_-({1 \\over A} + B) = v_-B = v_+B  \\therefore v_- = v_+ \\label{eq:result}\\end{align}\\)즉 close-loop op-amp에 대해,  $v_- = v_+$op-amp의 종류구성에 따라op-amp의 구성에 따라 open-loop와 closed-loop으로 분류할 수 있다.  open-loop op-amp  위에서 op-amp 등가회로의 예시로 보여줬던 회로이다. 다음의 수식으로 해석할 수 있다.\\(\\begin{equation}v_o = A(v_+ - v_-)\\end{equation}\\)  close-loop op-amp  $v_o$를 $v_-$로 close-loop을 통해 feedback시키는 회로이다.  대부분의 실제 op-amp는 close-loop으로 구현되어 있다고 한다. 또한 기본 식은 open-loop op-amp와 동일하다. 사실상 입력 신호는 $v_+$하나이고, $v_-$는 회로구성을 위해 이용되는 컴포넌트이다. 이때 feedback되는 $v_-$는 다음과 같이 표현된다. \\(\\begin{equation}v_i = v_+ \\quad ,\\quad v_- = v_oB\\end{equation}\\)동작 방식에 따라  Inverting op-amp  입력신호의 위상을 뒤집어서 출력하는 close-loop op-amp이다. $v_i$를 $v_-$에 인가하고, $v_+$는 접지한다.   $R_1$의 오른쪽 노드에서 KCL을 써주면 A값을 구할 수 있다.\\(\\begin{align}i_i + i_{FB} = 0 \\\\{v_i \\over R_1} + {v_o \\over R_2} = 0 \\\\A = {v_o \\over v_i} = -{R_2 \\over R_1} \\end{align}\\)  Non-Inverting op-amp  입력신호의 위상과 동일하게 출력하는 close-loop op-amp이다. $v_i$를 $v_+$에 인가하고, $v_-$에는 $v_o$를 feedback시킨다.   R1과 R2에 대해 옴의 법칙을 써주면 A값을 구할 수 있다.\\(\\begin{equation}A = {v_o \\over v_i} = {v_i({R_1 + R_2 \\over R_1}) \\over v_i} = {R_1 + R_2 \\over R_1}\\end{equation}\\)연산 종류에 따라      Difference op-amp  두 입력신호의 차이를 증폭시키는 op-amp이다. op-amp의 $v_-$ 노드에서 KCL\\eqref{eq:KCL}, $v_+$ 노드 양 옆 저항에서 옴의 법칙\\eqref{eq:ohm}을 쓰면 기본식을 구할 수 있다. \\(\\begin{align}{v_1 - v_- \\over R_1} + {v_o - v_- \\over R_2} = 0 \\label{eq:KCL} \\\\v_+ = v_- = v_2{R_2 \\over R_1 + R_1} \\label{eq:ohm} \\\\v_o = -{R_2 \\over R_1}(v_1 - v_2) \\end{align}\\)    Summing op-amp  두 입력 신호를 더하는 op-amp이다.  $v_-$노드에서 KCL\\eqref{eq:first}을 써주면 기본식을 구할 수 있다.\\(\\begin{align}      i_{i1} = {v_{i1} \\over R_{i1}} \\\\      i_{i2} = {v_{i2} \\over R_{i2}} \\\\      i_{FB} = {v_0 \\over R_2} \\\\      i_{1i} + i_{2i} + i_{FB} = 0 \\label{eq:first} \\\\      v_o &amp;= -({R_2 \\over R_i1}v_i1 + {R_2 \\over R_i2}v_{i2})\\end{align}\\)      Integrator  입력 신호를 적분해주는 op-amp이다. $v_-$노드에서 KCL\\eqref{eq:sum}을 써서  기본식을 구할 수 있다. capacitor가 $v_o$쪽에 달려있는 것이 특징이다. \\(\\begin{align}      i_f = C{dv_o \\over dt} \\\\      i_i = {v_i \\over R_1} \\\\      i_i + i_f = 0 \\label{eq:sum} \\\\      -{v_i \\over R_1C} = {dv_o \\over dt} \\\\      \\therefore v_o = -{1 \\over R_iC}\\int v_i\\, dt + v_o(0)  \\end{align}\\)    Differentiator   입력신호를 미분해주는 op-amp이다.  역시 $v_-$노드에서 KCL\\eqref{eq:sum2}을 써서 기본식을 구할 수 있고, capacitor가 $v_i$쪽에 달려있는 것이 특징이다.   \\(\\begin{align}      i_1 = C{dv_i \\over dt} \\\\      i_{FB} = {v_o \\over R_1} \\\\      i_i + i_f = 0 \\label{eq:sum2} \\\\      \\therefore v_o = -RC{dv_i \\over dt}\\end{align}\\)"
  },
  
  {
    "title": "How To Build Jekyll Blog Manually",
    "url": "/posts/how-to-build-jekyll-blog-manually/",
    "categories": "",
    "tags": "",
    "date": "2024-11-23 00:00:00 +0800",
    





    
    "snippet": "github blog를 수동으로 빌드하기. (github actions로 빌드가 되지 않을 때)나의 삽질 과정——–일반적인 경우에는 github에서 chirpy theme을 fork한 후에, repo name을 username.github.io으로 설정하면 자동으로 빌드가 된다. 따라서 위의 과정만 수행하면, 해당 url에서 다음과 같은 chirpy의...",
    "content": "github blog를 수동으로 빌드하기. (github actions로 빌드가 되지 않을 때)나의 삽질 과정——–일반적인 경우에는 github에서 chirpy theme을 fork한 후에, repo name을 username.github.io으로 설정하면 자동으로 빌드가 된다. 따라서 위의 과정만 수행하면, 해당 url에서 다음과 같은 chirpy의 메인화면이 출력되는 것을 볼 수 있다.그러나 나는 index.html의 내용인 “layout: home # Index page”라는 텍스트 밖에 뜨지 않았다. 길고 긴 구글링을 통해 jekyll을 통한 빌드가 제대로 되지 않으면 위의 상황이 발생한다는 것을 알 수 있었다. 그래서 구글링을 하던 도중 다음과 같은 해결책을 발견했다.  Github Setting - Pages - Bulid and development 에서 Source를 Github Actions 로 변경 이후, jekyll.yml 커밋.      1번 과정에서 build 오류가 날 시, 로컬에서 다음의 명령어를 입력한 후 chirpy source를 커밋 &amp; 1번 과정 재시도.     $ bundle lock --add-platform x86_64-linux 그러나 위의 해결책에도 불구하고 나는 jekyll.yml을 커밋하는 과정에서 빌드오류가 발생했다.    결국 나는 github actions에서 제공해주는 빌드 기능을 사용하지 않고, 수동으로 local에서 빌드해서 커밋하기로 했다. ~~정말 기분이 더러웠다.~~      수동으로 jekyll package 빌드하기제목에서는 github blog라는 다소 애매한 용어을 사용했지만, 사실 대부분의 github 블로그 테마는 jekyll package이다. jekyll package를 수동으로 빌드해서 github에 업로드하려면, gh-pages라는 브랜치를 생성 후, 이 브랜치에 _site폴더만 커밋해야 한다. _site폴더는 로컬에서 빌드하면 생성되는 폴더인데, c언어의 실행 파일과 같은, jekyll package의 빌드 후 생성된 정적 결과물이라고 볼 수 있다.      패키지 빌드 로컬의 패키지 루트 폴더에서 다음과 같이 패키지를 빌드한다.     $ bundle exec jekyll build            _site폴더가 생성되었을 것이다. _site폴더에서 다음의 명령들을 입력해서 gh-pages 브랜치에 _site 폴더의 파일들을 push한다.     git init git remote add origin \"ssh repo url\" git checkout -b gh-pages git add . git commit -m \"deploy\" git push -u origin gh-pages --force            github settings - pages - source 섹션에서 gh-pages 브랜치를 선택한다.  이제 정상적으로 웹 사이트가 작동하는 것을 확인할 수 있다.출처https://friendlyvillain.github.io/posts/chirpy-setup/ chatgpt"
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-11 00:34:00 +0800",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 20:55:00 +0800",
    





    
    "snippet": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnec...",
    "content": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnecessary files, and is perfect for users who want to focus on writing with minimal configuration.  Sign in to GitHub and navigate to the starter.  Click the Use this template button and then select Create a new repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Option 2. Forking the ThemeThis approach is convenient for modifying features or UI design, but presents challenges during upgrades. So don’t try this unless you are familiar with Jekyll and plan to heavily modify this theme.  Sign in to GitHub.  Fork the theme repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Setting up the EnvironmentOnce your repository is created, it’s time to set up your development environment. There are two primary methods:Using Dev Containers (Recommended for Windows)Dev Containers offer an isolated environment using Docker, which prevents conflicts with your system and ensures all dependencies are managed within the container.Steps:  Install Docker:          On Windows/macOS, install Docker Desktop.      On Linux, install Docker Engine.        Install VS Code and the Dev Containers extension.  Clone your repository:          For Docker Desktop: Start VS Code and clone your repo in a container volume.      For Docker Engine: Clone your repo locally, then open it in a container via VS Code.        Wait for the Dev Containers setup to complete.Setting up Natively (Recommended for Unix-like OS)For Unix-like systems, you can set up the environment natively for optimal performance, though you can also use Dev Containers as an alternative.Steps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone your repository to your local machine.  If you forked the theme, install Node.js and run bash tools/init.sh in the root directory to initialize the repository.  Run command bundle in the root of your repository to install the dependencies.UsageStart the Jekyll ServerTo run the site locally, use the following command:$ bundle exec jekyll s  If you are using Dev Containers, you must run that command in the VS Code Terminal.After a few seconds, the local server will be available at http://127.0.0.1:4000.ConfigurationUpdate the variables in _config.yml as needed. Some typical options include:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can enable or disable specific contacts in the _data/contact.yml file.Customizing the StylesheetTo customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss file to the same path in your Jekyll site, and add your custom styles at the end of the file.Customizing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined in _data/origin/cors.yml. You can replace some of them based on the network conditions in the region where your website is published.If you prefer to self-host the static assets, refer to the chirpy-static-assets repository.DeploymentBefore deploying, check the _config.yml file and ensure the url is configured correctly. If you prefer a project site and don’t use a custom domain, or if you want to visit your website with a base URL on a web server other than GitHub Pages, remember to set the baseurl to your project name, starting with a slash, e.g., /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy Using Github ActionsPrepare the following:  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, update the platform list of the lock file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service:      Go to your repository on GitHub. Select the Settings tab, then click Pages in the left navigation bar. In the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  You can now visit the URL provided by GitHub to access your site.Manual Build and DeploymentFor self-hosted servers, you will need to build the site on your local machine and then upload the site files to the server.Navigate to the root of the source project, and build your site with the following command:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in the _site folder of the project’s root directory. Upload these files to your target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 14:10:00 +0800",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 11:33:00 +0800",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

