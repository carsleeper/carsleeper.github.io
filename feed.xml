

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>/</id>
  <title>Chirpy</title>
  <subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle>
  <updated>2024-12-02T12:29:31+08:00</updated>
  <author>
    <name>your_full_name</name>
    <uri>/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator>
  <rights> © 2024 your_full_name </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>jekyll 블로그에서 mathjax가 정상적으로 작동하지 않을 때</title>
    <link href="/posts/mathjax-to-katex/" rel="alternate" type="text/html" title="jekyll 블로그에서 mathjax가 정상적으로 작동하지 않을 때" />
    <published>2024-12-02T00:00:00+08:00</published>
  
    <updated>2024-12-02T00:00:00+08:00</updated>
  
    <id>/posts/mathjax-to-katex/</id>
    <content type="text/html" src="/posts/mathjax-to-katex/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>문제 상황


글을 작성하다보면 수식을 작성할 때가 많은데, 빌드 후 배포된 정적 파일에서 수식에 관련한 렌더링 문제가 생겼다. 
포스팅에 처음 접속하면 다음과 같이 수식이 렌더링되지 않은 상태로 표시되다가, 새로고침을 몇 번 해주면 수식이 표시됐다가 안됐다가 하는 것이었다.



수식이 항상 비정상적으로 표시되면 차라리 해결하기 쉬운데, 되었다 안되었다 하니까 별의 별 짓을 다 해봤던 것 같다. 
최종적으로 내린 결론은 다음과 같다. 
필자는 chirpy theme을 사용하는데, 이 테마에서는 기본적으로 kramdown 엔진을 사용하고 있다. 
아무 설정을 안해도 수식 작성이 렌더링 되도록 만들어져 있는데, 이 때 default math engine을 어떤 것으로 채택하는지는 잘 모르겠다. 
어쨌든,...</summary>

  </entry>

  
  <entry>
    <title>Katex Test</title>
    <link href="/posts/katex-test/" rel="alternate" type="text/html" title="Katex Test" />
    <published>2024-12-02T00:00:00+08:00</published>
  
    <updated>2024-12-02T00:00:00+08:00</updated>
  
    <id>/posts/katex-test/</id>
    <content type="text/html" src="/posts/katex-test/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>가나다라마바사 $x + y = 4$

\begin{equation}
x + y = 4
\end{equation}

가나다라마바사

[\begin{aligned}
        a &amp;amp;amp;= b + c 
        b + c &amp;amp;amp;= a
    \end{aligned}]</summary>

  </entry>

  
  <entry>
    <title>Dreamhack XSS Filtering Bypass Write up</title>
    <link href="/posts/Dreamhackwriteup3/" rel="alternate" type="text/html" title="Dreamhack XSS Filtering Bypass Write up" />
    <published>2024-11-29T00:00:00+08:00</published>
  
    <updated>2024-11-29T00:00:00+08:00</updated>
  
    <id>/posts/Dreamhackwriteup3/</id>
    <content type="text/html" src="/posts/Dreamhackwriteup3/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>backend-side 분석


#!/usr/bin/python3
from flask import Flask, request, render_template
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
import urllib
import os

app = Flask(__name__)
app.secret_key = os.urandom(32)

try:
    FLAG = open(&amp;quot;./flag.txt&amp;quot;, &amp;quot;r&amp;quot;).read()
except:
    FLAG = &amp;quot;[**FLAG**]&amp;quot;

#localhost에서 전달받은 쿠키로 url에 get요청.
def read_url(url, cookie={&amp;quot;name...</summary>

  </entry>

  
  <entry>
    <title>Dreamhack CSRF-1 Write-Up</title>
    <link href="/posts/Dreamhack-WriteUp2/" rel="alternate" type="text/html" title="Dreamhack CSRF-1 Write-Up" />
    <published>2024-11-29T00:00:00+08:00</published>
  
    <updated>2024-11-29T00:00:00+08:00</updated>
  
    <id>/posts/Dreamhack-WriteUp2/</id>
    <content type="text/html" src="/posts/Dreamhack-WriteUp2/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
  

  <summary>backend-side 분석


#!/usr/bin/python3
from flask import Flask, request, render_template, make_response, redirect, url_for
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
import urllib
import os

app = Flask(__name__)
app.secret_key = os.urandom(32)

try:
    FLAG = open(&amp;quot;./flag.txt&amp;quot;, &amp;quot;r&amp;quot;).read()
except:
    FLAG = &amp;quot;[**FLAG**]&amp;quot;

users = {
    &amp;#39;guest&amp;#39;: &amp;#39;guest&amp;#39;,...</summary>

  </entry>

  
  <entry>
    <title>phasor notation의 개념과 연산</title>
    <link href="/posts/IEEE-10-1/" rel="alternate" type="text/html" title="phasor notation의 개념과 연산" />
    <published>2024-11-27T00:00:00+08:00</published>
  
    <updated>2024-11-27T00:00:00+08:00</updated>
  
    <id>/posts/IEEE-10-1/</id>
    <content type="text/html" src="/posts/IEEE-10-1/" />
    <author>
      <name>your_full_name</name>
    </author>

  
    
    <category term="IEEE" />
    
  

  <summary>phasor notation


전기전자공학에서 정현파를 표현하기 위해서는 $f(t) = A \cos(\omega t + \phi)$ 와 같은 수식을 사용한다. 
주기가 $f$인 정현파라고 하면, $\omega = 2\pi f$가 될 것이다. 
동일한 RLC회로에서 회로에서 교류전압 $v$와 그로 인한 $i$는 $\omega$가 같다. 
따라서 $A$와 $\phi$만 결정되면 특정 상태의 유일한 정현파를 결정할 수 있게 된다.  ($\because \omega$는 상수이다.) 
다음의 과정을 거쳐보자.

  삼각함수의 덧셈정리를 이용해 $f(t)$를 전개한다.
\(f(t) = A \cos(\omega t + \phi) = \textcolor{red}{A\cos\phi}\cos\omega t - \tex...</summary>

  </entry>

</feed>


